/*import { Console } from 'console';
import { useRef, useState, useEffect } from 'react';
import styled from 'styled-components';
import api from '../../service/api';

interface IMap{
    mapType: google.maps.MapTypeId,
    mapTypeControl?: boolean; 
}

interface IGeolocations{    
    lat: number;
    lng: number;    
}

interface IMarker{
    address: string;
    latitude: number;
    longitude: number;
}

type GoogleLatLng = google.maps.LatLng;
type GoogleMap = google.maps.Map;
type GoogleMarker = google.maps.Marker;

const Map = ({mapType, mapTypeControl = false}:IMap) => {

    const ref = useRef<HTMLDivElement>(null);

    const [map, setMap] = useState<GoogleMap>();
    const [geolocations, setGeolocation] = useState<IGeolocations[]>([]);
    const [marker, setMarker] = useState<IMarker>();

    const startMap = ():void => {
        if(!map){
            defaultMapStart()
        }
    }

    useEffect(startMap, [map]);

    const defaultMapStart = ():void => {
        const defaultAddress = new google.maps.LatLng(-22.1225, -51.388);
        initMap(13, defaultAddress);

    }

    useEffect(() => {
        api.get('/users/geolocations')
        .then(response => {
            response.data.map((geolocation:IGeolocations[]) => {
                setGeolocation(geolocation);
            })
        })
    }, []);        
    
    const getPoints = () => {
        var heatMapData = [];

        geolocations.map((geolocation) => (
            heatMapData.push(new google.maps.LatLng(geolocation.lat, geolocation.lng))
        ))
    }     
    
    useEffect(getPoints, [geolocations]);

    const initEventListener = ():void =>{
        if(map){
            google.maps.event.addListener(map, 'click', function(e){
                coordinateToAddress(e.latLng)
                console.log(e.latLng);
            })
        }
    };    

    useEffect(initEventListener, [map]);

    const coordinateToAddress = async (coordinate: GoogleLatLng) => {
        const geocoder = new google.maps.Geocoder();

        geocoder.geocode({location: coordinate}, function(results: any, status){
            if(status === 'OK'){            
                setMarker({
                    address: results[0].formatted_address,
                    latitude: coordinate.lat(),
                    longitude: coordinate.lng(),
                })
            }
        })
    };

    const addSingleMarker = ():void =>{
        if(marker){
            addMarker(new google.maps.LatLng(marker.latitude, marker.longitude));
        }
    }



    useEffect(addSingleMarker,  [marker])


    const addMarker = (location: GoogleLatLng):void => {
        
        const marker: GoogleMarker = new google.maps.Marker({
            position: location,
            map: map,
            icon: getIconAttributes('#000000')
        });
    };

    const getIconAttributes = (iconColor: string) =>{
        return{
            path: 'M11.0639 15.3003L26.3642 2.47559e-05L41.6646 15.3003L26.3638 51.3639L11.0639 15.3003 M22,17.5a4.5,4.5 0 1,0 9,0a4.5,4.5 0 1,0 -9,0Z',
            fillColor: iconColor,
            fillOpacity: 0.8,
            strokeColor: 'pink',
            strokeWeight: 2,
            anchor: new google.maps.Point(30, 50),        
        };
    }

    const initMap = (zoomLevel:number, address: GoogleLatLng):void =>{
        if(ref.current){
            setMap(
                new google.maps.Map(ref.current, {
                    zoom: zoomLevel,
                    center: address,
                    mapTypeControl: mapTypeControl,
                    streetViewControl: false,
                    zoomControl: true,
                    mapTypeId: mapType
                })
            );
        };        
    }
    

    return(
        <Container>
            <MapContainer ref={ref}></MapContainer>
        </Container>
    )
};

export default Map;

const MapContainer = styled.div`
    height: 80vh;
    width: 100%;
`;

const Container = styled.div`
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 50px;
`;*/